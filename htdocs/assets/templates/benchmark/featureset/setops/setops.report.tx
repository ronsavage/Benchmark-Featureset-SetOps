<html>
<head>
<title>Perl Modules for Array/Set Handling</title>
<link rel="stylesheet" type="text/css" href="<: $default_css :>">
<link rel="stylesheet" type="text/css" href="<: $fancy_table_css :>">
</head>
<body>

<h3 class="global_toc_text">Purpose</h3>

<p align="center">To cross-check a personal selection of modules which offer:</p>

: include "fancy.table.tx" { data => $purpose };

<table align="center">
<tr><td>Module names are read from data/module.list.ini, which is shipped with the distro.</td></tr>
<tr><td>Each module's data has an indicator - 'include = Yes/No' - which makes it easy to edit & re-run.</td></tr>
<tr><td>Further, each module has an indicator - 'overload_type = 1/2/3' - to specify the syntax to look for when processing overloads.</td></tr>
<tr><td>Per-module notes are handled using the same mechanism.</td></tr>
<tr><td>Excluded modules are listed at the end of this report.</td></tr>
</table>

<hr />

<h3 class="global_toc_text">Report generator</h3>

: include "fancy.table.tx" { data => $report_generator };

<hr />

<h3 class="global_toc_text">Modules included</h3>

: include "basic.table.tx" { row => $modules_included };

<table align="center">
<tr><td>Method names are found by scanning the source for /^sub.../.</td></tr>
<tr><td>Method names starting with '_' are ignored.</td></tr>
<tr><td>Also ignored are indented subs as in Set::Toolkit::TieArray, which is within the source of Set::Toolkit.</td></tr>
<tr><td>Sub-class files for Object::Array and Set::Scalar have been scanned and included.
<tr><td>Scanning the source means modules must be installed, but no attempt is made to load them at run-time.</td></tr>
<tr><td>Source files are found by running 'mwhere' which is shipped with the marvellous App::moduleswhere.</td><tr>
<tr><td>Version numbers are found by running 'mversion' which is shipped with the marvellous Module::Version.</td><tr>
</table>

<hr />

<h3 class="global_toc_text">Methods</h3>

: include "basic.table.tx" { row => $method_data };

<table align="center">
<tr><td>A cell containing 'Yes' means that module has a method of that name.</td></tr>
<tr><td>A token after 'Yes' is the overloaded operator defined in that module for that method.</td></tr>
</table>

<br />

<table align="center">
<tr><td>Just because 2 modules have a method with the same name does not mean the subs' behaviour is identical.</td></tr>
<tr><td>For instance, symmetric_difference() in Set::Tiny and Set::Scalar return different lists.</td></tr>
<tr><td>Not only that, but Set::Tiny's method returns a set, whereas Set::Scalar's returns a string.</td></tr>
<tr><td>Further, some methods in Set::Array change the invocant object, which is an apalling design feature.</td></tr>
<tr><td>Sample code ships as scripts/symmetric.demo.pl.</td></tr>
<tr><td>As always, RTFM!</td></tr>
</table>

<p align="center">In order to make life difficult:</p>

<table align="center">
<tr><td>Object::Array fiddles a list of method names copied from List::MoreUtils.</td></tr>
<tr><td>Set::Light has 2 aliases for exists: has and contains.</td></tr>
<tr><td>Set::Object and Set::Toolkit define some overloads via subs. These are ignored.</td></tr>
</table>

<hr />

<h3 class="global_toc_text">Statistics</h3>

<table align="center">
<tr><td>These statistics were generated with benchmark.pl, which ships with Set::Tiny.</td></tr>
<tr><td>The author of Set::Tiny says: This is a non-representative benchmark of different Set:: modules.</td></tr>
<tr><td>I ran it on my laptop, meaning ignore the absolute values and just use the comparative values.</td></tr>
<tr><td>The following stats also ship as data/benchmark.log.</td></tr>
</table>

<pre>
running benchmarks with sets of size 100 and 100

delete:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  3349/s          --        -93%        -94%
Set::Object 45997/s       1274%          --        -17%
Set::Tiny   55350/s       1553%         20%          --

difference:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  1745/s          --        -90%        -95%
Set::Object 17066/s        878%          --        -50%
Set::Tiny   33811/s       1837%         98%          --

insert:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  3759/s          --        -94%        -95%
Set::Object 62877/s       1573%          --        -10%
Set::Tiny   69818/s       1757%         11%          --

intersection:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  1659/s          --        -86%        -88%
Set::Object 12217/s        636%          --        -11%
Set::Tiny   13653/s        723%         12%          --

invert:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  2488/s          --        -80%        -91%
Set::Object 12560/s        405%          --        -54%
Set::Tiny   27307/s        998%        117%          --

is_disjoint:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar   786/s          --        -93%        -94%
Set::Object 11821/s       1404%          --        -12%
Set::Tiny   13398/s       1605%         13%          --

is_equal:
                Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar   1571/s          --        -98%        -99%
Set::Object  77422/s       4828%          --        -37%
Set::Tiny   123675/s       7772%         60%          --

is_proper_subset:
                 Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar    1584/s          --       -100%       -100%
Set::Object 1097492/s      69188%          --        -11%
Set::Tiny   1238753/s      78106%         13%          --

is_proper_superset:
                 Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar    1614/s          --       -100%       -100%
Set::Object  778425/s      48117%          --        -37%
Set::Tiny   1226609/s      75878%         58%          --

is_subset:
                Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar   1544/s          --        -98%        -99%
Set::Object  84620/s       5381%          --        -34%
Set::Tiny   129153/s       8265%         53%          --

is_superset:
                Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar   1570/s          --        -98%        -99%
Set::Object  76119/s       4748%          --        -38%
Set::Tiny   122530/s       7704%         61%          --

new:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  3491/s          --        -94%        -95%
Set::Object 62877/s       1701%          --        -11%
Set::Tiny   70969/s       1933%         13%          --

symmetric_difference:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  2765/s          --        -57%        -87%
Set::Object  6399/s        131%          --        -69%
Set::Tiny   20958/s        658%        228%          --

union:
               Rate Set::Scalar Set::Object   Set::Tiny
Set::Scalar  1558/s          --        -91%        -94%
Set::Object 17454/s       1020%          --        -37%
Set::Tiny   27568/s       1669%         58%          --
</pre>

<hr />

<h3 class="global_toc_text">Module excluded</h3>

: include "basic.table.tx" { row => $modules_excluded };

<hr />

<h3 class="global_toc_text">Environment</h3>

: include "fancy.table.tx" { data => $environment };

<hr />

</body>
</html>
