[Array::AsObject]
include = Yes

[Array::Compare]
include = No
notes = Array::Compare has very limited (focused) functionality

[Array::Uniq]
include = No
notes = Array::Uniq likewise

[Array::Utils]
include = No
notes = Array::Utils likewise

[Bit::Vector]
include = No
notes = Bit::Vector is sophisticated, but is more like an underlying support mechanism for sets<br/>and hence leaves a lot up to the end-user

[EO::Array]
include = No
notes = EO::Array is an OO wrapper around Perl's array type

[Object::Array]
include = Yes
sub_classes = Object::Array::Plugin::Builtins, Object::Array::Plugin::ListMoreUtils

[Set::Array]
include = Yes
overload_type = 1

[Set::Bag]
include = Yes
notes = Supports multisets [*]
overload_type = 1

[Set::DynamicGroups]
include = No
notes = Set::DynamicGroups handles multisets, as does Set::Bag.<br />It's designed to allow groups to be defined dynamically by rules based on other groups.<br />It has partial support for nested groups

[Set::Groups]
include = No
notes = Set::Groups supports nested groups, and hence a completely different set of methods

[Set::Hash]
include = No
notes = Set::Hash allows you to create strings as objects and use OO-style methods on them.<br />It's a sub-class of Set::Array

[Set::Light]
include = Yes
overload_type = 2

[Set::NestedGroups]
include = No
notes = Set::NestedGroups is like Set::Groups

[Set::Object]
include = Yes
overload_type = 1

[Set::Relation]
include = No
notes = Set::Relation is an emulator for RDBMS-style relational data

[Set::Scalar]
include = Yes
overload_type = 1
sub_classes = Set::Scalar::Base, Set::Scalar::Null, Set::Scalar::Real, Set::Scalar::Virtual

[Set::SortedArray]
include = Yes
overload_type = 1

[Set::Tiny]
include = Yes
overload_type = 2

[Set::Toolkit]
include = Yes
overload_type = 1
